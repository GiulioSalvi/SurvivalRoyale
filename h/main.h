#include "includes.h"

#define Ace 1
#define Two 2
#define Three 3
#define Four 4
#define Five 5
#define Six 6
#define Seven 7
#define Jack 8
#define Queen 9
#define King 10

#define Clubs 11
#define Spades 12
#define Diamonds 13
#define Hearts 14

typedef struct Card {
    int suit;
    int rank;
} Card;

typedef struct Player {
    int id;
    int lifePoints;
    bool revealedFacedDownCard;
    Card facedUpCard;
    Card facedDownCard;
} Player;

typedef struct Game {
    int playersCounter;
    int lifePointsOnTheField;
    Player** players;
} Game;

/// Generates a random number between min and max included.
int randomInt(int min, int max);

/// @brief Asks the number of players to the user.
/// @return The number of players.
int askPlayerNumber();
/// Generates a card with card's seed and number set to -1.
Card buildCard();
/// Generates a deck of 40 cards, generated by buildCard().
Card* buildDeck();
/// Generates a player with player's id to -1. Player's cards are built by buildCard. lifePoints property is unset.
Player* buildPlayer();
/// Generates a game with the given number of players. Players are built by buildPlayer. lifePointsOnTheField is unset.
Game buildGame(int playersCounter);
// void freeCard(Card* card);
void freeDeck(Card* deck);
void freePlayer(Player* player);
void freePlayers(Player** players, int playersCounter);
void freeGame(Game* game);

/// Generates a deck with cards ordered randomly.
Card* prepareCardDeck();
/// Generates a player structure with the given player id.
Player* preparePlayer(int id, Card* deck);
/// Generates a game structure with the given players number.
Game prepareGame(int playersCounter, Card* deck);
/// Shuffles the deck using Fisher - Yates algorithm.
void shuffleDeck(Card* deck);
/// @brief Handles the current game phase.
/// @param game Pointer to the game struct.
/// @return Returns if the game can go on.
bool handleGamePhase(Game* game);
bool isGameEnded(Game* game);
void applyEffect(Game* game, int playerPosition, bool facedUpCard);
bool revealFacedDownCard(Card card);
void giveCards(Game* game, Card* deck);
void announceDeadPlayers(Game* game);
int countDeadPlayers(Game* game);
void removeDeadPlayers(Game* game);
void withdrawCards(Game* game);
void announceWinner(Player player);

/// Checks if a card is present in a deck.
bool deckHasCard(Card* deck, Card card);
/// Checks if two cards are equal (it does not consider if the cards are faced down).
bool cardAreEqual(Card card1, Card card2);
/// Checks if the cards of a given player have been already given to other players.
bool cardsWereGiven(Player** players, int playersCounter, Player player);

void Pause(bool clear);
/// Prints card's seed and number.
void printCard(Card card, bool newLine);
void printDeck(Card* deck, bool newLine);
void printCardEffect(Card card, bool newLine);
void revealCard(Card card, int playerId, bool facedUp, bool newLine);
/// Prints player's info.
void printPlayer(Player player, bool newLine);
void printPlayers(Game game, bool newLine);