#include "includes.h"

const int Ace = 1;
const int Two = 2;
const int Three = 3;
const int Four = 4;
const int Five = 5;
const int Six = 6;
const int Seven = 7;
const int Jack = 8;
const int Queen = 9;
const int King = 10;

const int Clubs = 11;
const int Spades = 12;
const int Diamonds = 13;
const int Hearts = 14;

typedef struct Card {
    int suit;
    int rank;
} Card;

typedef struct Player {
    int id;
    int lifePoints;
    bool revealedFacedDownCard;
    Card* facedUpCard;
    Card* facedDownCard;
} Player;

typedef struct Game {
    int playersCounter;
    int lifePointsOnTheField;
    Player** players;
} Game;

/// Generates a random number between min and max included.
int randomInt(int min, int max);

/// @brief Asks the number of players to the user.
/// @return The number of players.
int askPlayerNumber();
/// Generates a card with card's seed and number set to -1.
Card* buildCard();
/// Generates a deck of 40 cards, generated by buildCard().
Card** buildDeck();
/// Generates a player with player's id to -1. Player's cards are built by buildCard. lifePoints property is unset.
Player* buildPlayer();
/// Generates a game with the given number of players. Players are built by buildPlayer. lifePointsOnTheField is unset.
Game buildGame(int playersCounter);

/// Generates a deck with cards ordered randomly.
Card** prepareCardDeck();
/// Generates a player structure with the given player id.
Player* preparePlayer(int id, Card** deck);
/// Generates a game structure with the given players number.
Game prepareGame(int playersCounter, Card** deck);
/// Shuffles the deck using Fisher - Yates algorithm.
void shuffleDeck(Card** deck);
/// @brief Handles the current game phase.
/// @param game Pointer to the game struct.
/// @return Returns if the game can go on.
bool handleGamePhase(Game* game);
void applyEffect(Game* game, int playerId, bool facedUpCard);
bool revealFacedDownCard(Card card);

/// Checks if a card is present in a deck.
bool deckHasCard(Card** deck, Card card);
/// Checks if two cards are equal (it does not consider if the cards are faced down).
bool cardAreEqual(Card card1, Card card2);
/// Checks if the cards of a given player have been already given to other players.
bool cardsWereGiven(Player** players, int playersCounter, Player player);

/// Prints card's seed and number.
void printCard(Card card, bool newLine);
void printCardEffect(Card card, bool newLine);
void revealCard(Card card, int playerId, bool facedUp, bool newLine);
/// Prints player's info.
void printPlayer(Player player, bool newLine);